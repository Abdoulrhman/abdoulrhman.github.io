{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/Todo-Class/todo.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/services/todo-data.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","export class Todo {\n    id:number;\n    title:string = '';\n    complete:boolean = false;\n\n    /**provide constructor logic that lets us specify property values during instantiation so we can easily create new Todo instances like this:\n     * \n     *   let todo = new Todo({\n        title: 'Read SitePoint article',\n        complete: false\n        });\n     */\n\n    constructor(values:Object = {}){\n\n        Object.assign(this, values);\n\n    }\n\n}\n","module.exports = \"\"","module.exports = \"\\n  <!--\\n\\n  [property]=\\\"expression\\\": set property of an element to the value of expression\\n\\n  (event)=\\\"statement\\\": execute statement when event occurred\\n\\n  [(property)]=\\\"expression\\\": create two-way binding with expression\\n\\n  [class.special]=\\\"expression\\\": add special CSS class to element when the value of expression is truthy\\n  \\n  [style.color]=\\\"expression\\\": set color CSS property to the value of expression\\n  -->\\n<section class=\\\"todoapp\\\">\\n  <header class=\\\"header\\\">\\n    <h1>Todos</h1>\\n    <input class=\\\"new-todo\\\" placeholder=\\\"What needs to be done?\\\" autofocus=\\\"\\\" [(ngModel)]=\\\"newTodo.title\\\" (keyup.enter)=\\\"addTodo()\\\">\\n  </header>\\n  <section class=\\\"main\\\" *ngIf=\\\"todos.length > 0\\\">\\n    <ul class=\\\"todo-list\\\">\\n      <li *ngFor=\\\"let todo of todos\\\" [class.completed]=\\\"todo.complete\\\">\\n        <div class=\\\"view\\\">\\n          <input class=\\\"toggle\\\" type=\\\"checkbox\\\" (click)=\\\"toggleTodoComplete(todo)\\\" [checked]=\\\"todo.complete\\\">\\n          <label>{{todo.title}}</label>\\n          <button class=\\\"destroy\\\" (click)=\\\"removeTodo(todo)\\\"></button>\\n        </div>\\n      </li>\\n    </ul>\\n  </section>\\n  <footer class=\\\"footer\\\" *ngIf=\\\"todos.length > 0\\\">\\n    <span class=\\\"todo-count\\\"><strong>{{todos.length}}</strong> {{todos.length == 1 ? 'item' : 'items'}} left</span>\\n  </footer>\\n</section>\\n\\n\"","import {Component} from '@angular/core';\nimport {Todo} from './Todo-Class/todo';\nimport {TodoDataService} from './services/todo-data.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [TodoDataService]\n})\nexport class AppComponent {\n\n  newTodo: Todo = new Todo();\n\n  constructor(private todoDataService: TodoDataService) {\n  }\n\n  addTodo() {\n    this.todoDataService.addTodo(this.newTodo);\n    this.newTodo = new Todo();\n  }\n\n  toggleTodoComplete(todo) {\n    this.todoDataService.toggleTodoComplete(todo);\n  }\n\n  removeTodo(todo) {\n    this.todoDataService.deleteTodoById(todo.id);\n  }\n\n  get todos() {\n    return this.todoDataService.getAllTodos();\n  }\n\n}","import { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { TodoDataService } from './services/todo-data.service';\n\n\nimport { AppComponent } from './app.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [TodoDataService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Todo } from './../Todo-Class/todo';\nimport { Injectable } from '@angular/core';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoDataService {\n\n  // Placeholder for last id so we can simulate\n  // automatic incrementing of ids\n  lastId: number = 0;\n\n  // Placeholder for todos\n  todos: Todo[] = [];\n\n\n  constructor() { }\n\n  // Simulate POST /todos\n  addTodo(todo: Todo): TodoDataService {\n    if (!todo.id) {\n      //Auto INCREMENT\n      todo.id = ++this.lastId;\n    }\n    this.todos.push(todo);\n    return this;\n  }\n\n\n    // Simulate DELETE /todos/:id\n    deleteTodoById(id: number): TodoDataService {\n      this.todos = this.todos\n        .filter(todo => todo.id !== id);\n      return this;\n    }\n\n\n\n      // Simulate PUT /todos/:id\n  updateTodoById(id: number, values: Object = {}): Todo {\n    let todo = this.getTodoById(id);\n    if (!todo) {\n      return null;\n    }\n    Object.assign(todo, values);\n    return todo;\n  }\n\n  // Simulate GET /todos\n  getAllTodos(): Todo[] {\n    return this.todos;\n  }\n\n  // Simulate GET /todos/:id\n  getTodoById(id: number): Todo {\n    return this.todos\n      .filter(todo => todo.id === id)\n      .pop();\n  }\n\n  // Toggle todo complete\n  toggleTodoComplete(todo: Todo){\n    let updatedTodo = this.updateTodoById(todo.id, {\n      complete: !todo.complete\n    });\n    return updatedTodo;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n"],"sourceRoot":""}